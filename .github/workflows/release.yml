name: Release Management

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type de release (manuel)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      deploy_to_ovh:
        description: 'D√©ployer sur OVH'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  # Job pour cr√©er une nouvelle release
  create-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version
        id: bump
        run: |
          # Lire la version actuelle
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          
          # Configuration pour le bump de version
          if [ "${{ github.event.inputs.release_type }}" = "major" ]; then
            echo "RELEASE_TYPE=major" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.release_type }}" = "minor" ]; then
            echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
          else
            echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
          fi
          
          # Calculer la nouvelle version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          if [ "$RELEASE_TYPE" = "major" ]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          elif [ "$RELEASE_TYPE" = "minor" ]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          else
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version calcul√©e: $NEW_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.bump.outputs.new_version }} --no-git-tag-version
          echo "Version mise √† jour vers ${{ steps.bump.outputs.new_version }}"

      - name: Generate CHANGELOG entry
        run: |
          # Cr√©er une entr√©e temporaire pour la nouvelle version
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          CURRENT_DATE=$(date +%Y-%m-%d)
          
          # Cr√©er un fichier temporaire avec la nouvelle entr√©e
          cat > temp_changelog.md << EOF
          ## [$NEW_VERSION] - $CURRENT_DATE
          
          ### üöÄ Ajout√©
          - Release $NEW_VERSION
          
          ### üîß Modifi√©
          - Mise √† jour de la version
          
          ---
          
          EOF
          
          # Ajouter au d√©but du CHANGELOG.md (apr√®s la section Unreleased)
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            sed -i "/^## \[Unreleased\]/a\\" temp_changelog.md
            sed -i "/^## \[Unreleased\]/r temp_changelog.md" CHANGELOG.md
          else
            # Si pas de section Unreleased, ajouter √† la fin
            echo "" >> CHANGELOG.md
            cat temp_changelog.md >> CHANGELOG.md
          fi
          rm temp_changelog.md

      - name: Commit and push changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git push origin main

      - name: Create Git tag
        run: |
          git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          release_name: Release v${{ steps.bump.outputs.new_version }}
          body: |
            ## üöÄ Release v${{ steps.bump.outputs.new_version }}
            
            ### üìã R√©sum√© des changements
            
            Consultez le [CHANGELOG.md](CHANGELOG.md) pour plus de d√©tails.
            
            ### üîÑ D√©ploiement
            
            Cette release sera automatiquement d√©ploy√©e via les workflows GitHub Actions.
            
            ### üìä Monitoring
            
            - [Prometheus](http://IP_VPS:9090)
            - [Grafana](http://IP_VPS:3001)
            - [Alertmanager](http://IP_VPS:9093)
            
            ---
            
            *Release g√©n√©r√©e automatiquement*
          draft: false
          prerelease: false

  # Job pour d√©ployer automatiquement lors d'un tag ou apr√®s create-release
  deploy-release:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ needs.create-release.outputs.new_version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "D√©ploiement de la version $VERSION"

      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.OVH_SSH_KEY }}
          port: 22
          script: |
            set -e
            echo "üöÄ D√©ploiement de la version ${{ steps.version.outputs.version }}"
       
            # Aller dans le r√©pertoire
            cd ~/benevoclic || exit 1
            echo "üìÅ R√©pertoire: $(pwd)"
            
            # V√©rifier Git
            git status || echo "‚ö†Ô∏è Probl√®me avec Git"
            
            # Mettre √† jour le code
            echo "üì• Mise √† jour du code..."
            git pull origin main || exit 1
            
            # Installer les d√©pendances
            echo "üì¶ Installation des d√©pendances..."
            npm install || exit 1
            
            # Build de l'application
            echo "üî® Build de l'application..."
            npm run build || exit 1
            
            # Red√©marrer les services
            echo "üîÑ Red√©marrage des services..."
            pm2 restart benevoclic-api || exit 1
            
            # V√©rifier le d√©ploiement
            echo "üîç V√©rification du d√©ploiement..."
            sleep 10
            curl -f http://${{IP}}:3000/health || exit 1
            
            echo "‚úÖ D√©ploiement de la version ${{ steps.version.outputs.version }} termin√© !"

      - name: Notify Discord
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\":\"‚úÖ **Release v${{ steps.version.outputs.version }} d√©ploy√©e avec succ√®s !**\\n\\nüì¶ Version: v${{ steps.version.outputs.version }}\\nüîó [Voir les changements](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }})\\nüìä [Monitoring](http://151.80.152.63:9090)\"}" \
              ${{ secrets.WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\":\"‚ùå **√âchec du d√©ploiement de la release v${{ steps.version.outputs.version }}**\\n\\nüîç V√©rifiez les logs du workflow pour plus de d√©tails.\"}" \
              ${{ secrets.WEBHOOK_URL }}
          fi

  # Job pour g√©n√©rer les release notes
  generate-release-notes:
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Extraire la version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ needs.create-release.outputs.new_version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          # G√©n√©rer les release notes depuis le CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            RELEASE_NOTES=$(awk "/^## \\[$VERSION\\]/ {p=1; next} /^## \\[/ {p=0} p" CHANGELOG.md | sed '/^$/d')
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "Release $VERSION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Update Release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let version;
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              version = '${{ needs.create-release.outputs.new_version }}';
            } else {
              version = context.ref.replace('refs/tags/v', '');
            }
            
            const release = releases.find(r => r.tag_name === `v${version}`);
            
            if (release) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: `${{ steps.release_notes.outputs.release_notes }}`
              });
            } 