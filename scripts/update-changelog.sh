#!/bin/bash

# Script pour mettre √† jour automatiquement le CHANGELOG.md
# Usage: ./scripts/update-changelog.sh [version] [date]

VERSION=${1:-$(node -p "require('./package.json').version")}
DATE=${2:-$(date +%Y-%m-%d)}

echo "Mise √† jour du CHANGELOG.md pour la version $VERSION ($DATE)"

# Obtenir la derni√®re version tagg√©e ou HEAD^ si pas de tag
LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)

echo "Analyse des commits depuis $LAST_TAG..."

# R√©cup√©rer tous les commits depuis la derni√®re version
ALL_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")

# Cat√©goriser les commits par type
FEATURES=$(echo "$ALL_COMMITS" | grep -E "^feat:" || echo "")
FIXES=$(echo "$ALL_COMMITS" | grep -E "^fix:" || echo "")
DOCS=$(echo "$ALL_COMMITS" | grep -E "^docs:" || echo "")
CHORES=$(echo "$ALL_COMMITS" | grep -E "^chore:" || echo "")
REFACTORS=$(echo "$ALL_COMMITS" | grep -E "^refactor:" || echo "")
TESTS=$(echo "$ALL_COMMITS" | grep -E "^test:" || echo "")
STYLES=$(echo "$ALL_COMMITS" | grep -E "^style:" || echo "")
PERFS=$(echo "$ALL_COMMITS" | grep -E "^perf:" || echo "")

# Fonction pour formater les commits
format_commits() {
    echo "$1" | while IFS= read -r commit; do
        if [ -n "$commit" ]; then
            # Extraire le message sans le pr√©fixe
            message=$(echo "$commit" | sed 's/^[^:]*: //')
            echo "- $message"
        fi
    done
}

echo "Cr√©ation de l'entr√©e changelog..."

# Cr√©er l'entr√©e changelog
cat > temp_changelog.md << EOF
## [$VERSION] - $DATE

EOF

# Ajouter les fonctionnalit√©s si elles existent
if [ -n "$FEATURES" ]; then
    cat >> temp_changelog.md << EOF
### üöÄ Ajout√©
$(format_commits "$FEATURES")

EOF
fi

# Ajouter les corrections si elles existent
if [ -n "$FIXES" ]; then
    cat >> temp_changelog.md << EOF
### üêõ Corrig√©
$(format_commits "$FIXES")

EOF
fi

# Ajouter la documentation si elle existe
if [ -n "$DOCS" ]; then
    cat >> temp_changelog.md << EOF
### üìö Documentation
$(format_commits "$DOCS")

EOF
fi

# Ajouter les refactorisations si elles existent
if [ -n "$REFACTORS" ]; then
    cat >> temp_changelog.md << EOF
### ‚ôªÔ∏è Refactorisation
$(format_commits "$REFACTORS")

EOF
fi

# Ajouter les tests si ils existent
if [ -n "$TESTS" ]; then
    cat >> temp_changelog.md << EOF
### üß™ Tests
$(format_commits "$TESTS")

EOF
fi

# Ajouter les styles si ils existent
if [ -n "$STYLES" ]; then
    cat >> temp_changelog.md << EOF
### üíÑ Style
$(format_commits "$STYLES")

EOF
fi

# Ajouter les performances si elles existent
if [ -n "$PERFS" ]; then
    cat >> temp_changelog.md << EOF
### ‚ö° Performance
$(format_commits "$PERFS")

EOF
fi

# Ajouter les t√¢ches de maintenance si elles existent
if [ -n "$CHORES" ]; then
    cat >> temp_changelog.md << EOF
### üîß Maintenance
$(format_commits "$CHORES")

EOF
fi

# Ajouter la ligne de s√©paration
cat >> temp_changelog.md << EOF
---

EOF

echo "Int√©gration dans CHANGELOG.md..."

# V√©rifier si CHANGELOG.md existe
if [ ! -f "CHANGELOG.md" ]; then
    echo "Cr√©ation du fichier CHANGELOG.md..."
    cat > CHANGELOG.md << EOF
# üìã Changelog - Benevoclic API

Toutes les modifications notables de ce projet seront document√©es dans ce fichier.

Le format est bas√© sur [Keep a Changelog](https://keepachangelog.com/fr/1.0.0/),
et ce projet adh√®re au [Semantic Versioning](https://semver.org/lang/fr/).

## [Unreleased]

### üöÄ Ajout√©
- Fonctionnalit√©s en cours de d√©veloppement

---

EOF
fi

# Ins√©rer l'entr√©e dans CHANGELOG.md
if grep -q "## \[Unreleased\]" CHANGELOG.md; then
    # Ins√©rer apr√®s la section [Unreleased]
    awk '/^## \[Unreleased\]/ {print; system("cat temp_changelog.md"); next} {print}' CHANGELOG.md > CHANGELOG.md.tmp
    mv CHANGELOG.md.tmp CHANGELOG.md
    echo "‚úÖ Entr√©e ajout√©e apr√®s la section [Unreleased]"
else
    # Ajouter au d√©but du fichier
    cat temp_changelog.md CHANGELOG.md > CHANGELOG.md.tmp
    mv CHANGELOG.md.tmp CHANGELOG.md
    echo "‚úÖ Entr√©e ajout√©e au d√©but du fichier"
fi

# Nettoyer
rm temp_changelog.md

echo "‚úÖ CHANGELOG.md mis √† jour avec succ√®s !"
echo ""
echo "Prochaines √©tapes :"
echo "1. V√©rifier le contenu : cat CHANGELOG.md"
echo "2. Commiter les changements : git add CHANGELOG.md"
echo "3. Cr√©er un commit : git commit -m 'docs: update CHANGELOG for version $VERSION'"
echo "4. Pousser : git push origin main" 